// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 4b41cf3d71aa85cd4e75c96cbb54324481ee0b27).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { DeleteOldTweets } from "./delete_old_tweets_reducer.ts";
export { DeleteOldTweets };
import { DeleteTweetsByTopic } from "./delete_tweets_by_topic_reducer.ts";
export { DeleteTweetsByTopic };
import { InsertTweet } from "./insert_tweet_reducer.ts";
export { InsertTweet };

// Import and reexport all table handle types
import { CleanupTimerTableHandle } from "./cleanup_timer_table.ts";
export { CleanupTimerTableHandle };
import { TweetTableHandle } from "./tweet_table.ts";
export { TweetTableHandle };

// Import and reexport all types
import { CleanupTimer } from "./cleanup_timer_type.ts";
export { CleanupTimer };
import { GeoPoint } from "./geo_point_type.ts";
export { GeoPoint };
import { Tweet } from "./tweet_type.ts";
export { Tweet };

const REMOTE_MODULE = {
  tables: {
    cleanup_timer: {
      tableName: "cleanup_timer",
      rowType: CleanupTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: CleanupTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    tweet: {
      tableName: "tweet",
      rowType: Tweet.getTypeScriptAlgebraicType(),
      primaryKey: "rowId",
      primaryKeyInfo: {
        colName: "rowId",
        colType: Tweet.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    delete_old_tweets: {
      reducerName: "delete_old_tweets",
      argsType: DeleteOldTweets.getTypeScriptAlgebraicType(),
    },
    delete_tweets_by_topic: {
      reducerName: "delete_tweets_by_topic",
      argsType: DeleteTweetsByTopic.getTypeScriptAlgebraicType(),
    },
    insert_tweet: {
      reducerName: "insert_tweet",
      argsType: InsertTweet.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "DeleteOldTweets", args: DeleteOldTweets }
| { name: "DeleteTweetsByTopic", args: DeleteTweetsByTopic }
| { name: "InsertTweet", args: InsertTweet }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  deleteOldTweets(timer: CleanupTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DeleteOldTweets.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_old_tweets", __argsBuffer, this.setCallReducerFlags.deleteOldTweetsFlags);
  }

  onDeleteOldTweets(callback: (ctx: ReducerEventContext, timer: CleanupTimer) => void) {
    this.connection.onReducer("delete_old_tweets", callback);
  }

  removeOnDeleteOldTweets(callback: (ctx: ReducerEventContext, timer: CleanupTimer) => void) {
    this.connection.offReducer("delete_old_tweets", callback);
  }

  deleteTweetsByTopic(topic: string) {
    const __args = { topic };
    let __writer = new BinaryWriter(1024);
    DeleteTweetsByTopic.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_tweets_by_topic", __argsBuffer, this.setCallReducerFlags.deleteTweetsByTopicFlags);
  }

  onDeleteTweetsByTopic(callback: (ctx: ReducerEventContext, topic: string) => void) {
    this.connection.onReducer("delete_tweets_by_topic", callback);
  }

  removeOnDeleteTweetsByTopic(callback: (ctx: ReducerEventContext, topic: string) => void) {
    this.connection.offReducer("delete_tweets_by_topic", callback);
  }

  insertTweet(tweetId: string, content: string, username: string, lat: number, lon: number, createdAt: Timestamp, topic: string | undefined) {
    const __args = { tweetId, content, username, lat, lon, createdAt, topic };
    let __writer = new BinaryWriter(1024);
    InsertTweet.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("insert_tweet", __argsBuffer, this.setCallReducerFlags.insertTweetFlags);
  }

  onInsertTweet(callback: (ctx: ReducerEventContext, tweetId: string, content: string, username: string, lat: number, lon: number, createdAt: Timestamp, topic: string | undefined) => void) {
    this.connection.onReducer("insert_tweet", callback);
  }

  removeOnInsertTweet(callback: (ctx: ReducerEventContext, tweetId: string, content: string, username: string, lat: number, lon: number, createdAt: Timestamp, topic: string | undefined) => void) {
    this.connection.offReducer("insert_tweet", callback);
  }

}

export class SetReducerFlags {
  deleteOldTweetsFlags: CallReducerFlags = 'FullUpdate';
  deleteOldTweets(flags: CallReducerFlags) {
    this.deleteOldTweetsFlags = flags;
  }

  deleteTweetsByTopicFlags: CallReducerFlags = 'FullUpdate';
  deleteTweetsByTopic(flags: CallReducerFlags) {
    this.deleteTweetsByTopicFlags = flags;
  }

  insertTweetFlags: CallReducerFlags = 'FullUpdate';
  insertTweet(flags: CallReducerFlags) {
    this.insertTweetFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get cleanupTimer(): CleanupTimerTableHandle {
    return new CleanupTimerTableHandle(this.connection.clientCache.getOrCreateTable<CleanupTimer>(REMOTE_MODULE.tables.cleanup_timer));
  }

  get tweet(): TweetTableHandle {
    return new TweetTableHandle(this.connection.clientCache.getOrCreateTable<Tweet>(REMOTE_MODULE.tables.tweet));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
